# ::P2PTransportManager::constructor
::P2PTransportManager::constructor {args} {
  eval configure $args
}

# ::P2PTransportManager::destructor
::P2PTransportManager::destructor {} {
}

# ::P2PTransportManager::__init__
body ::P2PTransportManager::__init__ { client} {
  return
}

# ::P2PTransportManager::_register_transport
body ::P2PTransportManager::_register_transport { transport} {
  return
}

# ::P2PTransportManager::_unregister_transport
body ::P2PTransportManager::_unregister_transport { transport} {
  return
}

# ::P2PTransportManager::_get_transport
body ::P2PTransportManager::_get_transport { peer} {
  return
}

# ::P2PTransportManager::_on_chunk_received
body ::P2PTransportManager::_on_chunk_received { transport chunk} {
  return
}

# ::P2PTransportManager::_on_chunk_sent
body ::P2PTransportManager::_on_chunk_sent { transport chunk} {
  return
}

# ::P2PTransportManager::_on_blob_sent
body ::P2PTransportManager::_on_blob_sent { transport blob} {
  return
}

# ::P2PTransportManager::_on_blob_received
body ::P2PTransportManager::_on_blob_received { transport blob} {
  return
}

# ::P2PTransportManager::send_slp_message
body ::P2PTransportManager::send_slp_message { peer peer_guid application_id message} {
  return
}

# ::P2PTransportManager::send_data
body ::P2PTransportManager::send_data { peer peer_guid application_id session_id data} {
  return
}

# ::P2PTransportManager::register_data_buffer
body ::P2PTransportManager::register_data_buffer { session_id buffer size} {
  return
}

